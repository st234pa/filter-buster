{"version":3,"sources":["components/Content.tsx","components/EmailEdit.tsx","components/EmailPreview.tsx","components/FilterBuster.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Content","props","formControl","formText","formFeedback","handleChange","evt","action","target","value","isHidden","isLongText","Form","Control","as","rows","placeholder","onChange","className","errorMessage","helperText","Text","Feedback","type","Group","Label","label","EmailEdit","doneEditing","to","Row","Col","replace","cc","bcc","setSubject","subject","setBody","body","md","Button","block","onClick","onDoneEditing","EmailPreview","onBackToEdit","variant","onOpenInMail","FilterBuster","query","URLSearchParams","useLocation","search","templateSubject","get","React","useState","randomizedSubject","setRandomizedSubject","templateBody","randomizedBody","setRandomizedBody","setDoneEditing","Container","lg","href","rel","Card","Body","addRandomizedCharacters","window","scrollTo","recipientsList","ccList","concat","bccList","subjectString","encodeURIComponent","bodyString","open","randomNumber","min","max","Math","ceil","floor","random","addRandomizedCharacter","word","splitByPunctuation","split","length","randomIndex","substring","charCode","String","fromCharCode","randomCharacter","returnStr","forEach","substr","content","words","randomizedContent","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.12dcb516.chunk.js","sourcesContent":["import React from 'react';\nimport { ContentCallback } from '../App';\nimport Form from 'react-bootstrap/Form';\n\ntype ContentProps = {\n  label: string;\n  placeholder: string;\n  action: ContentCallback;\n  isLongText: boolean;\n  value: string;\n  isHidden?: boolean;\n  helperText?: string;\n  errorMessage?: string;\n};\n\nexport default function Content(props: ContentProps) {\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    props.action(evt.target.value);\n  };\n  if (props.isHidden) {\n    return;\n  }\n  let formControl: any;\n  if (props.isLongText) {\n    formControl = (\n      <Form.Control\n        as=\"textarea\"\n        rows={10}\n        placeholder={props.placeholder}\n        onChange={handleChange}\n        value={props.value}\n      />\n    );\n  } else {\n    formControl = (\n      <Form.Control\n        className={'input ' + (props.errorMessage && ' is-invalid')}\n        placeholder={props.placeholder}\n        value={props.value}\n        onChange={handleChange}\n      />\n    );\n  }\n  let formText: any;\n  if (props.helperText) {\n    formText = <Form.Text className=\"text-muted\">{props.helperText}</Form.Text>;\n  } else {\n    formText = null;\n  }\n  let formFeedback: any;\n  if (props.errorMessage) {\n    formFeedback = (\n      <Form.Control.Feedback type=\"invalid\">\n        {props.errorMessage}\n      </Form.Control.Feedback>\n    );\n  } else {\n    formFeedback = null;\n  }\n  return (\n    <Form.Group>\n      <Form.Label className=\"input-label\">{props.label}</Form.Label>&nbsp;\n      {formControl}\n      {formText}\n      {formFeedback}\n    </Form.Group>\n  );\n}\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Content from './Content';\nimport { ContentCallback, ButtonCallback } from '../App';\n\ntype EmailEditProps = {\n  to: string | null;\n  cc: string | null;\n  bcc: string | null;\n  subject: string;\n  body: string;\n  doneEditing: boolean;\n  setSubject: ContentCallback;\n  setBody: ContentCallback;\n  onDoneEditing: ButtonCallback;\n};\n\nfunction EmailEdit(props: EmailEditProps) {\n  if (props.doneEditing) {\n    return null;\n  }\n  return (\n    <>\n      {props.to && (\n        <Row>\n          <Col>\n            <p>To: {props.to.replace(/,/g, ', ')}</p>\n          </Col>\n        </Row>\n      )}\n      {props.cc && (\n        <Row>\n          <Col>\n            <p>Cc: {props.cc.replace(/,/g, ', ')}</p>\n          </Col>\n        </Row>\n      )}\n      {props.bcc && (\n        <Row>\n          <Col>\n            <p>Cc: {props.bcc.replace(/,/g, ', ')}</p>\n          </Col>\n        </Row>\n      )}\n      <Row>\n        <Col>\n          {Content({\n            label: 'Subject:',\n            placeholder: 'Type or paste subject line',\n            action: props.setSubject,\n            value: props.subject,\n            helperText: 'For security reasons, content needs to be plain text',\n            errorMessage: '',\n            isLongText: false,\n          })}\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {Content({\n            label: 'Body:',\n            placeholder: 'Type or paste email body',\n            action: props.setBody,\n            value: props.body,\n            helperText: 'For security reasons, content needs to be plain text',\n            errorMessage: '',\n            isLongText: true,\n          })}\n        </Col>\n      </Row>\n      <Row className=\"justify-content-md-center mt-3 mb-3\">\n        <Col md={4}>\n          <Button block onClick={props.onDoneEditing}>\n            Done Editing\n          </Button>\n        </Col>\n      </Row>\n    </>\n  );\n}\n\nexport default EmailEdit;\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { ButtonCallback } from '../App';\n\ntype EmailPreviewProps = {\n  to: string | null;\n  cc: string | null;\n  bcc: string | null;\n  subject: string;\n  body: string;\n  doneEditing: boolean;\n  onBackToEdit: ButtonCallback;\n  onOpenInMail: ButtonCallback;\n};\n\nfunction EmailPreview(props: EmailPreviewProps) {\n  if (!props.doneEditing) {\n    return null;\n  }\n  return (\n    <>\n      <Row>\n        <Col>\n          {props.to && <p>To: {props.to.replace(/,/g, ', ')}</p>}\n          {props.cc && <p>Cc: {props.cc.replace(/,/g, ', ')}</p>}\n          {props.bcc && <p>Bcc: {props.bcc.replace(/,/g, ', ')}</p>}\n          <hr />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <p className=\"preview-body\">\n            {props.body ? props.body : '[No body]'}\n          </p>\n          <hr />\n        </Col>\n      </Row>\n      <Row className=\"justify-content-md-center mt-3 mb-3\">\n        <Col md={4} className=\"mb-2\">\n          <Button block onClick={props.onBackToEdit} variant=\"secondary\">\n            Back to Edit\n          </Button>\n        </Col>\n        <Col md={4}>\n          <Button block onClick={props.onOpenInMail} className=\"mb-2\">\n            Open in Mail\n          </Button>\n        </Col>\n      </Row>\n    </>\n  );\n}\n\nexport default EmailPreview;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport EmailEdit from './EmailEdit';\nimport EmailPreview from './EmailPreview';\nimport { addRandomizedCharacters } from '../App';\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nfunction FilterBuster() {\n  let query = useQuery();\n  // ex. <homepage>?to=<to>&bcc=<bcc>\n  const templateSubject = query.get('subject');\n  const [subject, setSubject] = React.useState<string>(\n    templateSubject ? templateSubject : ''\n  );\n  const [randomizedSubject, setRandomizedSubject] = React.useState<string>('');\n  const templateBody = query.get('body');\n  const [body, setBody] = React.useState<string>(\n    templateBody ? templateBody : ''\n  );\n  const [randomizedBody, setRandomizedBody] = React.useState<string>('');\n  const [doneEditing, setDoneEditing] = React.useState<boolean>(false);\n\n  function onDoneEditing() {\n    setDoneEditing(true);\n    setRandomizedSubject(addRandomizedCharacters(subject));\n    setRandomizedBody(addRandomizedCharacters(body));\n    window.scrollTo(0, 0);\n  }\n  function onBackToEdit() {\n    window.scrollTo(0, 0);\n    setDoneEditing(false);\n  }\n\n  function onOpenInMail() {\n    let recipientsList: string | null = query.get('to');\n    let ccList: string | null = query.get('cc');\n    if (ccList) {\n      ccList = `cc=`.concat(ccList);\n    } else {\n      ccList = '';\n    }\n    let bccList: string | null = query.get('bcc');\n    if (bccList) {\n      bccList = `&bcc=`.concat(bccList);\n    } else {\n      bccList = '';\n    }\n    let subjectString: string = '';\n    if (randomizedSubject !== '') {\n      subjectString = `&subject=${encodeURIComponent(randomizedSubject)}`;\n    }\n    let bodyString: string = `&body=${encodeURIComponent(randomizedBody)}`;\n    window.open(\n      `mailto:${\n        recipientsList ? recipientsList : ''\n      }?${ccList}${bccList}${subjectString}${bodyString}`\n    );\n  }\n\n  return (\n    <Container className=\"pt-3\">\n      <Row className=\"justify-content-md-center\">\n        <Col lg={8}>\n          <h1 className=\"text-center mb-3\">Filter Buster</h1>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-md-center mb-0\">\n        <Col lg={8}>\n          <p className=\"text-center mb-0\">\n            Inspired by{' '}\n            <a\n              href=\"https://linktr.ee/justiceforelijahmcclain\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              @Justiceforelijahmcclain\n            </a>\n            , we've created a new tool to help make sure that your email isn't\n            ignored by your intended recipients. After you finish editing the\n            content of your email, Filter Buster inserts a randomized character\n            into each word to bypass any filters.\n          </p>\n          <p className=\"text-center mb-3\">\n            <small>&mdash; Sarah and Stephanie Yoon</small>\n          </p>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-md-center\">\n        <Col lg={8}>\n          <Card>\n            <Card.Body className=\"pb-2\">\n              <Row>\n                <Col>\n                  <h2 className=\"break-word\">\n                    {subject ? subject : '[No Subject]'}\n                  </h2>\n                  {(query.get('to') ||\n                    query.get('cc') ||\n                    query.get('bcc') ||\n                    !doneEditing) && <br className=\"mb-4\" />}\n                </Col>\n              </Row>\n              <EmailEdit\n                to={query.get('to')}\n                cc={query.get('cc')}\n                bcc={query.get('bcc')}\n                subject={subject}\n                body={body}\n                setSubject={setSubject}\n                setBody={setBody}\n                doneEditing={doneEditing}\n                onDoneEditing={onDoneEditing}\n              />\n              <EmailPreview\n                to={query.get('to')}\n                cc={query.get('cc')}\n                bcc={query.get('bcc')}\n                subject={randomizedSubject}\n                body={randomizedBody}\n                doneEditing={doneEditing}\n                onBackToEdit={onBackToEdit}\n                onOpenInMail={onOpenInMail}\n              />\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default FilterBuster;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport FilterBuster from './components/FilterBuster';\nimport './App.css';\n\nexport type ContentCallback = {\n  (text: string): void;\n};\n\nexport type ButtonCallback = {\n  (): void;\n};\n\n// Function to generate random number between min and max, both inclusive\nfunction randomNumber(min: number, max: number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction randomCharacter() {\n  const charCode = randomNumber(33, 47); // non-alphanumeric char code\n  return String.fromCharCode(charCode);\n}\n\nfunction addRandomizedCharacter(word: string) {\n  const splitByPunctuation = word.split(/([.,/#!$%^&*;:{}=\\-_`~()\"'])/);\n  if (word.length < 2) {\n    return word;\n  }\n  if (splitByPunctuation.length === 1) {\n    const randomIndex = randomNumber(1, word.length - 1);\n    return (\n      word.substring(0, randomIndex) +\n      randomCharacter() +\n      word.substring(randomIndex, word.length)\n    );\n  }\n  let returnStr = '';\n  splitByPunctuation.forEach((substr) => {\n    returnStr = returnStr.concat(addRandomizedCharacter(substr));\n  });\n  return returnStr;\n}\n\nexport function addRandomizedCharacters(content: string) {\n  const words = content.split(/([\\n\\s])/);\n  let randomizedContent = '';\n  words.forEach((value) => {\n    randomizedContent += addRandomizedCharacter(value);\n  });\n  return randomizedContent;\n}\n\nfunction App() {\n  return (\n    <Router>\n      <FilterBuster />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}